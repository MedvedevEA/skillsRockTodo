// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/repostore/repostore.go

// Package storemock is a generated GoMock package.
package storemock

import (
	reflect "reflect"
	entity "skillsRockTodo/internal/entity"
	dto "skillsRockTodo/internal/repository/repostore/dto"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddMessage mocks base method.
func (m *MockRepository) AddMessage(dto *dto.AddMessage) (*entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessage", dto)
	ret0, _ := ret[0].(*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockRepositoryMockRecorder) AddMessage(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockRepository)(nil).AddMessage), dto)
}

// AddStatus mocks base method.
func (m *MockRepository) AddStatus(name string) (*entity.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStatus", name)
	ret0, _ := ret[0].(*entity.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddStatus indicates an expected call of AddStatus.
func (mr *MockRepositoryMockRecorder) AddStatus(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStatus", reflect.TypeOf((*MockRepository)(nil).AddStatus), name)
}

// AddTask mocks base method.
func (m *MockRepository) AddTask(dto *dto.AddTask) (*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", dto)
	ret0, _ := ret[0].(*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTask indicates an expected call of AddTask.
func (mr *MockRepositoryMockRecorder) AddTask(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockRepository)(nil).AddTask), dto)
}

// AddTaskUser mocks base method.
func (m *MockRepository) AddTaskUser(dto *dto.AddTaskUser) (*entity.TaskUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTaskUser", dto)
	ret0, _ := ret[0].(*entity.TaskUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTaskUser indicates an expected call of AddTaskUser.
func (mr *MockRepositoryMockRecorder) AddTaskUser(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTaskUser", reflect.TypeOf((*MockRepository)(nil).AddTaskUser), dto)
}

// AddUserWithUserId mocks base method.
func (m *MockRepository) AddUserWithUserId(dto *dto.AddUser) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserWithUserId", dto)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserWithUserId indicates an expected call of AddUserWithUserId.
func (mr *MockRepositoryMockRecorder) AddUserWithUserId(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserWithUserId", reflect.TypeOf((*MockRepository)(nil).AddUserWithUserId), dto)
}

// GetMessage mocks base method.
func (m *MockRepository) GetMessage(messageId *uuid.UUID) (*entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", messageId)
	ret0, _ := ret[0].(*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockRepositoryMockRecorder) GetMessage(messageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockRepository)(nil).GetMessage), messageId)
}

// GetMessages mocks base method.
func (m *MockRepository) GetMessages(dto *dto.GetMessages) ([]*entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", dto)
	ret0, _ := ret[0].([]*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockRepositoryMockRecorder) GetMessages(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockRepository)(nil).GetMessages), dto)
}

// GetStatus mocks base method.
func (m *MockRepository) GetStatus(statusId *uuid.UUID) (*entity.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", statusId)
	ret0, _ := ret[0].(*entity.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockRepositoryMockRecorder) GetStatus(statusId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockRepository)(nil).GetStatus), statusId)
}

// GetStatuses mocks base method.
func (m *MockRepository) GetStatuses() ([]*entity.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatuses")
	ret0, _ := ret[0].([]*entity.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatuses indicates an expected call of GetStatuses.
func (mr *MockRepositoryMockRecorder) GetStatuses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatuses", reflect.TypeOf((*MockRepository)(nil).GetStatuses))
}

// GetTask mocks base method.
func (m *MockRepository) GetTask(taskId *uuid.UUID) (*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", taskId)
	ret0, _ := ret[0].(*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockRepositoryMockRecorder) GetTask(taskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockRepository)(nil).GetTask), taskId)
}

// GetTaskUsers mocks base method.
func (m *MockRepository) GetTaskUsers(dto *dto.GetTaskUsers) ([]*entity.TaskUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskUsers", dto)
	ret0, _ := ret[0].([]*entity.TaskUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskUsers indicates an expected call of GetTaskUsers.
func (mr *MockRepositoryMockRecorder) GetTaskUsers(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskUsers", reflect.TypeOf((*MockRepository)(nil).GetTaskUsers), dto)
}

// GetTasks mocks base method.
func (m *MockRepository) GetTasks(dto *dto.GetTasks) ([]*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks", dto)
	ret0, _ := ret[0].([]*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockRepositoryMockRecorder) GetTasks(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockRepository)(nil).GetTasks), dto)
}

// GetUsers mocks base method.
func (m *MockRepository) GetUsers(dto *dto.GetUsers) ([]*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", dto)
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockRepositoryMockRecorder) GetUsers(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockRepository)(nil).GetUsers), dto)
}

// RemoveMessage mocks base method.
func (m *MockRepository) RemoveMessage(messageId *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMessage", messageId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMessage indicates an expected call of RemoveMessage.
func (mr *MockRepositoryMockRecorder) RemoveMessage(messageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMessage", reflect.TypeOf((*MockRepository)(nil).RemoveMessage), messageId)
}

// RemoveStatus mocks base method.
func (m *MockRepository) RemoveStatus(statusId *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStatus", statusId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveStatus indicates an expected call of RemoveStatus.
func (mr *MockRepositoryMockRecorder) RemoveStatus(statusId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStatus", reflect.TypeOf((*MockRepository)(nil).RemoveStatus), statusId)
}

// RemoveTask mocks base method.
func (m *MockRepository) RemoveTask(taskId *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTask", taskId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTask indicates an expected call of RemoveTask.
func (mr *MockRepositoryMockRecorder) RemoveTask(taskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTask", reflect.TypeOf((*MockRepository)(nil).RemoveTask), taskId)
}

// RemoveTaskUser mocks base method.
func (m *MockRepository) RemoveTaskUser(taskUserID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTaskUser", taskUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTaskUser indicates an expected call of RemoveTaskUser.
func (mr *MockRepositoryMockRecorder) RemoveTaskUser(taskUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTaskUser", reflect.TypeOf((*MockRepository)(nil).RemoveTaskUser), taskUserID)
}

// RemoveUser mocks base method.
func (m *MockRepository) RemoveUser(userId *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockRepositoryMockRecorder) RemoveUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockRepository)(nil).RemoveUser), userId)
}

// UpdateMessage mocks base method.
func (m *MockRepository) UpdateMessage(dto *dto.UpdateMessage) (*entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessage", dto)
	ret0, _ := ret[0].(*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMessage indicates an expected call of UpdateMessage.
func (mr *MockRepositoryMockRecorder) UpdateMessage(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessage", reflect.TypeOf((*MockRepository)(nil).UpdateMessage), dto)
}

// UpdateStatus mocks base method.
func (m *MockRepository) UpdateStatus(dto *dto.UpdateStatus) (*entity.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", dto)
	ret0, _ := ret[0].(*entity.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockRepositoryMockRecorder) UpdateStatus(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockRepository)(nil).UpdateStatus), dto)
}

// UpdateTask mocks base method.
func (m *MockRepository) UpdateTask(dto *dto.UpdateTask) (*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", dto)
	ret0, _ := ret[0].(*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockRepositoryMockRecorder) UpdateTask(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockRepository)(nil).UpdateTask), dto)
}
